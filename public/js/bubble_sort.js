// Generated by CoffeeScript 1.3.3
(function() {
  var Animate, BubbleSort, Node;

  Animate = (function() {

    function Animate(id, canvas_height, canvas_width, stroke, frame_rate) {
      this.id = id;
      this.canvas_height = canvas_height;
      this.canvas_width = canvas_width;
      this.stroke = stroke;
      this.frame_rate = frame_rate;
      this.ctx = document.getElementById("" + this.id).getContext("2d");
      this.height = this.canvas_height;
      this.width = this.canvas_width;
      this.stroke = this.stroke;
      this.last_node1 = null;
      this.last_node2 = null;
      this.steps = 0;
      this.data_size = 0;
      this.frame_rate = this.frame_rate;
    }

    Animate.prototype.reset_canvas = function() {
      return this.ctx.clearRect(0, 0, this.height, this.width);
    };

    Animate.prototype.draw_data_set = function(data_set) {
      var num, num_index, _i, _len, _results;
      this.data_size = data_set.length;
      _results = [];
      for (num_index = _i = 0, _len = data_set.length; _i < _len; num_index = ++_i) {
        num = data_set[num_index];
        this.ctx.fillStyle = "rgb(45,123,200)";
        _results.push(this.ctx.fillRect(num_index * this.stroke, this.height - num, this.stroke, num));
      }
      return _results;
    };

    Animate.prototype.draw_current = function(x, y) {
      this.ctx.clearRect(x * this.stroke, 0, this.stroke, this.height);
      this.ctx.fillStyle = "rgb(51, 204, 102)";
      return this.ctx.fillRect(x * this.stroke, this.height - y, this.stroke, y);
    };

    Animate.prototype.draw_current_two = function(x, y) {
      this.ctx.clearRect(x * this.stroke, 0, this.stroke, this.height);
      this.ctx.fillStyle = "rgb(255, 142, 10)";
      return this.ctx.fillRect(x * this.stroke, this.height - y, this.stroke, y);
    };

    Animate.prototype.draw_last = function(x, y) {
      this.ctx.clearRect(x * this.stroke, 0, this.stroke, this.height);
      this.ctx.fillStyle = "rgb(150,123,200)";
      return this.ctx.fillRect(x * this.stroke, this.height - y, this.stroke, y);
    };

    Animate.prototype.draw_progression = function(progression) {
      var current, next,
        _this = this;
      if (this.steps === 0) {
        this.steps = progression.length;
      }
      if (progression.length !== 0) {
        current = progression.shift();
        this.draw_current(current.x, current.y);
        if (progression.length !== 0) {
          next = progression.shift();
          this.draw_current_two(next.x, next.y);
        }
        if (current) {
          this.last_node1 = current;
        }
        if (next) {
          this.last_node2 = next;
        }
        return window.setTimeout(function() {
          if (_this.last_node1 !== null) {
            _this.draw_last(_this.last_node1.x, _this.last_node1.y);
          }
          if (_this.last_node2 !== null) {
            _this.draw_last(_this.last_node2.x, _this.last_node2.y);
          }
          return _this.draw_progression(progression);
        }, this.frame_rate);
      } else {
        return $('#steps').html("" + this.steps + " comparative steps were required to sort " + this.data_size + " elements");
      }
    };

    Animate.prototype.in_progression = function(current_node, progression) {
      var node, _i, _len;
      for (_i = 0, _len = progression.length; _i < _len; _i++) {
        node = progression[_i];
        if (current_node.x === node.x && current_node.y === node.y) {
          return true;
        }
      }
      return false;
    };

    return Animate;

  })();

  Node = (function() {

    function Node(x, y) {
      this.x = x;
      this.y = y;
      this.x = this.x;
      this.y = this.y;
    }

    return Node;

  })();

  BubbleSort = (function() {

    function BubbleSort(canvas_height, canvas_width, stroke) {
      this.canvas_height = canvas_height;
      this.canvas_width = canvas_width;
      this.stroke = stroke;
      this.data_set = [];
      this.progression = [];
      this.canvas_height = this.canvas_height;
      this.canvas_width = this.canvas_width;
      this.stroke = this.stroke;
    }

    BubbleSort.prototype.initialize_data = function() {
      var _results;
      _results = [];
      while (this.data_set.length < (parseInt(this.canvas_width / this.stroke))) {
        _results.push(this.data_set.push(parseInt(Math.random() * 1000 % this.canvas_height)));
      }
      return _results;
    };

    BubbleSort.prototype.bubble_sort = function() {
      var current_node, last_node, num, num_index, switched, _i, _len, _ref;
      switched = false;
      _ref = this.data_set;
      for (num_index = _i = 0, _len = _ref.length; _i < _len; num_index = ++_i) {
        num = _ref[num_index];
        if (num_index !== 0) {
          current_node = new Node(num_index, num);
          last_node = new Node(num_index - 1, this.data_set[num_index - 1]);
          if (last_node.y > current_node.y) {
            this.swap_data_points(last_node, current_node, num_index);
            this.swap_nodes(last_node, current_node, num_index);
            this.record_progression(last_node, current_node);
            switched = true;
          }
        }
      }
      if (switched === true) {
        return this.bubble_sort();
      }
    };

    BubbleSort.prototype.swap_data_points = function(last_node, current_node, num_index) {
      this.data_set[num_index] = last_node.y;
      return this.data_set[num_index - 1] = current_node.y;
    };

    BubbleSort.prototype.swap_nodes = function(last_node, current_node, num_index) {
      last_node.x = num_index;
      return current_node.x = num_index - 1;
    };

    BubbleSort.prototype.record_progression = function(last_node, current_node) {
      this.progression.push(last_node);
      return this.progression.push(current_node);
    };

    return BubbleSort;

  })();

  $(document).ready(function() {
    var animate, bubble, canvas_height, canvas_width, frame_rate, stroke;
    frame_rate = 25;
    stroke = 20;
    canvas_height = parseInt($('#bubble_sort').css('height').replace("px", ""));
    canvas_width = parseInt($('#bubble_sort').css('width').replace("px", ""));
    animate = new Animate("bubble_sort", canvas_height, canvas_width, stroke, frame_rate);
    bubble = new BubbleSort(canvas_height, canvas_width, stroke);
    bubble.initialize_data();
    animate.draw_data_set(bubble.data_set);
    bubble.bubble_sort();
    return animate.draw_progression(bubble.progression);
  });

}).call(this);
